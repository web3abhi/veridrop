// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Claim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claim", id.toString(), this);
    }
  }

  static load(id: string): Claim | null {
    return changetype<Claim | null>(store.get("Claim", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get claimAddress(): Bytes {
    let value = this.get("claimAddress");
    return value!.toBytes();
  }

  set claimAddress(value: Bytes) {
    this.set("claimAddress", Value.fromBytes(value));
  }

  get creatorAddress(): Bytes {
    let value = this.get("creatorAddress");
    return value!.toBytes();
  }

  set creatorAddress(value: Bytes) {
    this.set("creatorAddress", Value.fromBytes(value));
  }

  get tokenDistributionWallet(): Bytes {
    let value = this.get("tokenDistributionWallet");
    return value!.toBytes();
  }

  set tokenDistributionWallet(value: Bytes) {
    this.set("tokenDistributionWallet", Value.fromBytes(value));
  }

  get airdropToken(): Bytes {
    let value = this.get("airdropToken");
    return value!.toBytes();
  }

  set airdropToken(value: Bytes) {
    this.set("airdropToken", Value.fromBytes(value));
  }

  get whitelistToken(): Bytes {
    let value = this.get("whitelistToken");
    return value!.toBytes();
  }

  set whitelistToken(value: Bytes) {
    this.set("whitelistToken", Value.fromBytes(value));
  }

  get whitelistTokenNetwork(): string {
    let value = this.get("whitelistTokenNetwork");
    return value!.toString();
  }

  set whitelistTokenNetwork(value: string) {
    this.set("whitelistTokenNetwork", Value.fromString(value));
  }

  get whitelistTokenBlockNum(): BigInt {
    let value = this.get("whitelistTokenBlockNum");
    return value!.toBigInt();
  }

  set whitelistTokenBlockNum(value: BigInt) {
    this.set("whitelistTokenBlockNum", Value.fromBigInt(value));
  }

  get minWhitelistTokenValue(): BigInt {
    let value = this.get("minWhitelistTokenValue");
    return value!.toBigInt();
  }

  set minWhitelistTokenValue(value: BigInt) {
    this.set("minWhitelistTokenValue", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    return value!.toBigInt();
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    return value!.toBigInt();
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get coolDownTime(): BigInt {
    let value = this.get("coolDownTime");
    return value!.toBigInt();
  }

  set coolDownTime(value: BigInt) {
    this.set("coolDownTime", Value.fromBigInt(value));
  }

  get hasAllowanceMechanism(): boolean {
    let value = this.get("hasAllowanceMechanism");
    return value!.toBoolean();
  }

  set hasAllowanceMechanism(value: boolean) {
    this.set("hasAllowanceMechanism", Value.fromBoolean(value));
  }

  get merkleRoot(): Bytes {
    let value = this.get("merkleRoot");
    return value!.toBytes();
  }

  set merkleRoot(value: Bytes) {
    this.set("merkleRoot", Value.fromBytes(value));
  }

  get maxClaimableAmount(): BigInt {
    let value = this.get("maxClaimableAmount");
    return value!.toBigInt();
  }

  set maxClaimableAmount(value: BigInt) {
    this.set("maxClaimableAmount", Value.fromBigInt(value));
  }

  get totalClaimAmount(): BigInt {
    let value = this.get("totalClaimAmount");
    return value!.toBigInt();
  }

  set totalClaimAmount(value: BigInt) {
    this.set("totalClaimAmount", Value.fromBigInt(value));
  }

  get admins(): Array<Bytes> {
    let value = this.get("admins");
    return value!.toBytesArray();
  }

  set admins(value: Array<Bytes>) {
    this.set("admins", Value.fromBytesArray(value));
  }

  get moderators(): Array<Bytes> {
    let value = this.get("moderators");
    return value!.toBytesArray();
  }

  set moderators(value: Array<Bytes>) {
    this.set("moderators", Value.fromBytesArray(value));
  }

  get description(): string {
    let value = this.get("description");
    return value!.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get totalAmountClaimed(): BigInt {
    let value = this.get("totalAmountClaimed");
    return value!.toBigInt();
  }

  set totalAmountClaimed(value: BigInt) {
    this.set("totalAmountClaimed", Value.fromBigInt(value));
  }

  get numOfUsersClaimed(): BigInt {
    let value = this.get("numOfUsersClaimed");
    return value!.toBigInt();
  }

  set numOfUsersClaimed(value: BigInt) {
    this.set("numOfUsersClaimed", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    return value!.toBigInt();
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get claimType(): BigInt {
    let value = this.get("claimType");
    return value!.toBigInt();
  }

  set claimType(value: BigInt) {
    this.set("claimType", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get networkId(): string {
    let value = this.get("networkId");
    return value!.toString();
  }

  set networkId(value: string) {
    this.set("networkId", Value.fromString(value));
  }
}

export class Airdrop extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Airdrop entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Airdrop must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Airdrop", id.toString(), this);
    }
  }

  static load(id: string): Airdrop | null {
    return changetype<Airdrop | null>(store.get("Airdrop", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get claimAddress(): Bytes {
    let value = this.get("claimAddress");
    return value!.toBytes();
  }

  set claimAddress(value: Bytes) {
    this.set("claimAddress", Value.fromBytes(value));
  }

  get claimerAddress(): Bytes {
    let value = this.get("claimerAddress");
    return value!.toBytes();
  }

  set claimerAddress(value: Bytes) {
    this.set("claimerAddress", Value.fromBytes(value));
  }

  get amountClaimed(): BigInt {
    let value = this.get("amountClaimed");
    return value!.toBigInt();
  }

  set amountClaimed(value: BigInt) {
    this.set("amountClaimed", Value.fromBigInt(value));
  }

  get totalAmountClaimed(): BigInt {
    let value = this.get("totalAmountClaimed");
    return value!.toBigInt();
  }

  set totalAmountClaimed(value: BigInt) {
    this.set("totalAmountClaimed", Value.fromBigInt(value));
  }

  get airdropToken(): Bytes {
    let value = this.get("airdropToken");
    return value!.toBytes();
  }

  set airdropToken(value: Bytes) {
    this.set("airdropToken", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Claimer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Claimer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Claimer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Claimer", id.toString(), this);
    }
  }

  static load(id: string): Claimer | null {
    return changetype<Claimer | null>(store.get("Claimer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimAddress(): Bytes {
    let value = this.get("claimAddress");
    return value!.toBytes();
  }

  set claimAddress(value: Bytes) {
    this.set("claimAddress", Value.fromBytes(value));
  }

  get claimerAddress(): Bytes {
    let value = this.get("claimerAddress");
    return value!.toBytes();
  }

  set claimerAddress(value: Bytes) {
    this.set("claimerAddress", Value.fromBytes(value));
  }

  get totalAmountClaimed(): BigInt {
    let value = this.get("totalAmountClaimed");
    return value!.toBigInt();
  }

  set totalAmountClaimed(value: BigInt) {
    this.set("totalAmountClaimed", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value!.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get claimAddress(): Bytes {
    let value = this.get("claimAddress");
    return value!.toBytes();
  }

  set claimAddress(value: Bytes) {
    this.set("claimAddress", Value.fromBytes(value));
  }

  get depositorAddress(): Bytes {
    let value = this.get("depositorAddress");
    return value!.toBytes();
  }

  set depositorAddress(value: Bytes) {
    this.set("depositorAddress", Value.fromBytes(value));
  }

  get depositAmount(): BigInt {
    let value = this.get("depositAmount");
    return value!.toBigInt();
  }

  set depositAmount(value: BigInt) {
    this.set("depositAmount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
